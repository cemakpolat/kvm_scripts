#!/bin/bash

## source: http://wiki.qemu.org/Documentation/Networking/NAT

KVMNET_UID=1000
KVMNET_GID=$(grep kvm /etc/group | cut -d ':' -f 3)

# number of TUN/TAP devices to setup
NUM_OF_DEVICES=6

BRIDGE=kvmbr0
NETWORK=192.168.101.0
GATEWAY=192.168.101.1
NETMASK=255.255.255.0
DHCPRANGE=192.168.101.2,192.168.101.254


# Optionally parameters to enable PXE support
TFTPROOT=
BOOTP=

# KVM network setup procedures

# "$@" an array of arguments. I.e, "do_brctl aaa bbb" results in "brctl aaa bbb".
do_brctl() {
	brctl "$@"
}

do_ifconfig() {
	ifconfig "$@"
}

do_iptables_restore() {
	iptables-restore "$@"
}

do_dnsmasq() {
	dnsmasq "$@"
}

check_bridge_status() {
	echo "Check existence... bridge device kvmbr0"
		BR_STATUS=$(ifconfig | grep "$1")
		if [ test "${BR_STATUS}" = "" ]; then
			return 1
		else
			return 0
		fi
}

create_bridge() {
	modprobe kvm
	modprobe kvm_intel
	modprobe tun

	do_brctl addbr "$1"	
	do_brctl stp "$1" off
	do_brctl setfd "$1" 0
	do_ifconfig "$1" "$GATEWAY" netmask "$NETMASK" up
	ip a a 2001:db8:1234:5::1:1/64 dev kvmbr0

	for ((i=0; i < NUM_OF_DEVICES ; i++)); do
		echo -n "Setting up "
		tunctl -b -g ${KVMNET_GID} -t kvmnet$i
		#tunctl -b -u ${KVMNET_UID} -t kvmnet$i
		brctl addif kvmbr0 kvmnet$i
		ifconfig kvmnet$i up 0.0.0.0 promisc
	done

}

enable_ip_forward() {
	echo "1" > /proc/sys/net/ipv4/ip_forward
}

add_filter_rules() {
#	cat <<EOF
do_iptables_restore <<EOF
*nat
:PREROUTING ACCEPT [61:9671]
:POSTROUTING ACCEPT [121:7499]
:OUTPUT ACCEPT [132:8691]
-A POSTROUTING -s $NETWORK/$NETMASK -j MASQUERADE
COMMIT
# Completed on Fri Aug 24 15:20:25 2007
# Generated by iptables-save v1.3.6 on Fri Aug 24 15:20:25 2007
*filter
:INPUT ACCEPT [1453:976046]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [1605:194911]
-A INPUT -i $BRIDGE -p tcp -m tcp --dport 67 -j ACCEPT
-A INPUT -i $BRIDGE -p udp -m udp --dport 67 -j ACCEPT
-A INPUT -i $BRIDGE -p tcp -m tcp --dport 53 -j ACCEPT
-A INPUT -i $BRIDGE -p udp -m udp --dport 53 -j ACCEPT
-A FORWARD -i $1 -o $1 -j ACCEPT
-A FORWARD -s $NETWORK/$NETMASK -i $BRIDGE -j ACCEPT
-A FORWARD -d $NETWORK/$NETMASK -o $BRIDGE -m state --state RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -o $BRIDGE -j REJECT --reject-with icmp-port-unreachable
-A FORWARD -i $BRIDGE -j REJECT --reject-with icmp-port-unreachable
COMMIT
EOF
}

start_dnsmasq() {
	do_dnsmasq \
	--strict-order \
	--except-interface=lo \
	--interface=$BRIDGE \
	--listen-address=$GATEWAY \
	--bind-interfaces \
	--dhcp-range=$DHCPRANGE \
	--conf-file="" \
	--pid-file=/var/run/qemu-dnsmasq-$BRIDGE.pid \
	--dhcp-leasefile=/var/run/qemu-dnsmasq-$BRIDGE.leases \
	--dhcp-no-override \
	${TFTPROOT:+"--enable-tftp"} \
	${TFTPROOT:+"--tftp-root=$TFTPROOT"} \
	${BOOTP:+"--dhcp-boot=$BOOTP"}
}

## Action!
# argument 1: "$BRIDGE"
setup_bridge_nat() {
	if check_bridge_status "$1"
	then 
		create_bridge "$1"
		enable_ip_forward
		add_filter_rules "$1"
		start_dnsmasq "$1"
	else
		echo "Bridge $1 already exist"
	fi
}

remove_bridge_nat() {
	for ((i=0; i < NUM_OF_DEVICES ; i++)); do
		ifconfig kvmnet$i down
		brctl delif kvmbr0 kvmnet$i
		tunctl -d kvmnet$i
	done
	ifconfig kvmbr0 down
	brctl delbr kvmbr0
	
#SuSEfirewall2 stop
#SuSEfirewall2

#rmmod kvm_intel
#rmmod kvm
}

case $1 in
	nat)
		setup_bridge_nat "$BRIDGE"
	;;
	iptables)
		add_filter_rules "$BRIDGE"
	;;
	*)
	echo "Usage: $(basename $0) (nat|newscript)"
esac

